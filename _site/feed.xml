<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-01-26T22:32:42+08:00</updated><id>http://localhost:4000/</id><title type="html">0xl2oot.github.io</title><subtitle>王永红的个人博客</subtitle><author><name>王永红</name></author><entry><title type="html">【已解决】GitHub Metadata:No GitHub API authentication could be found</title><link href="http://localhost:4000/2018/01/26/jekyll/" rel="alternate" type="text/html" title="【已解决】GitHub Metadata:No GitHub API authentication could be found" /><published>2018-01-26T00:00:00+08:00</published><updated>2018-01-26T00:00:00+08:00</updated><id>http://localhost:4000/2018/01/26/jekyll</id><content type="html" xml:base="http://localhost:4000/2018/01/26/jekyll/">&lt;p&gt;Jekyll配置报错&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GitHub Metadata: No GitHub API authentication could be found. Some fields may be missing or have incorrect data.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>王永红</name></author><summary type="html">Jekyll配置报错 GitHub Metadata: No GitHub API authentication could be found. Some fields may be missing or have incorrect data.</summary></entry><entry><title type="html">解决两个 Android 模拟器之间无法网络通信的问题</title><link href="http://localhost:4000/2018/01/02/tcp-connect-between-android-emulators/" rel="alternate" type="text/html" title="解决两个 Android 模拟器之间无法网络通信的问题" /><published>2018-01-02T00:00:00+08:00</published><updated>2018-01-02T00:00:00+08:00</updated><id>http://localhost:4000/2018/01/02/tcp-connect-between-android-emulators</id><content type="html" xml:base="http://localhost:4000/2018/01/02/tcp-connect-between-android-emulators/">&lt;p&gt;本文解决的是一个小众场景的问题：&lt;/p&gt;

&lt;p&gt;出差在外，需要调试局域网内的两台 Android 设备之间通过 TCP 通信的情况，可手边又不是随时有多台可用的设备，于是想在笔记本上同时跑两台 Android 模拟器来构造调试环境，但是发现它俩的 IP 地址竟然都是 10.0.2.15，场面一度十分尴尬……&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/android/ip-address.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;谷狗之后，众多相关的博客和问答贴将我引向了官方文档页面：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/studio/run/emulator-networking.html#connecting&quot;&gt;Interconnecting emulator instances&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原来官方指南上解释过相关的知识，现将我关心和以前迷惑的部分翻译摘录如下，如果希望对此有个更全面的了解，还是推荐完整阅读 Android 官方文档里有关 Emulator 的章节 &lt;a href=&quot;https://developer.android.com/studio/run/emulator.html&quot;&gt;https://developer.android.com/studio/run/emulator.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;首先讲一点预备知识，再说解决方案。&lt;/p&gt;

&lt;h2 id=&quot;模拟器的网络地址空间&quot;&gt;模拟器的网络地址空间&lt;/h2&gt;

&lt;p&gt;每个模拟器都运行在一个虚拟路由/防火墙服务后面，这个服务将模拟器和宿主机器的网络接口、配置以及 Internet 隔离开来。对模拟器而言，宿主机器和其它模拟器对它是不可见的，它只知道自己是通过以太网连接到路由/防火墙。&lt;/p&gt;

&lt;p&gt;每个模拟器的虚拟路由管理 10.0.2/24 的网络地址空间，所有地址都是 10.0.2.xx 格式。地址预分配的情况如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;网络地址&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;10.0.2.1&lt;/td&gt;
      &lt;td&gt;路由/网络地址&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.0.2.2&lt;/td&gt;
      &lt;td&gt;宿主机器的 loopback interface，相当于电脑上的 127.0.0.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.0.2.3&lt;/td&gt;
      &lt;td&gt;首选 DNS Server&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.0.2.4 &lt;br /&gt; 10.0.2.5 &lt;br /&gt; 10.0.2.6&lt;/td&gt;
      &lt;td&gt;可选的第二、第三、第四 DNS Server&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.0.2.15&lt;/td&gt;
      &lt;td&gt;模拟器的网络地址&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;127.0.0.1&lt;/td&gt;
      &lt;td&gt;模拟器的 loopback interface&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;需要注意的是所有模拟器的网络地址分配都是一样的，这样一来，如果有两个模拟器同时运行在一台电脑上，它们都会有各自的路由，并且给两个模拟器分配的 IP 都是 10.0.2.15。它们被路由隔离，相互不可见。&lt;/p&gt;

&lt;p&gt;另外一点就是模拟器上的 127.0.0.1 是指它自己，所以如果想访问宿主机器上运行的服务，要使用 10.0.2.2。&lt;/p&gt;

&lt;h2 id=&quot;实现两台模拟器之间的通信&quot;&gt;实现两台模拟器之间的通信&lt;/h2&gt;

&lt;p&gt;现在来解决标题和文首提到的问题，主要用到了网络重定向。&lt;/p&gt;

&lt;p&gt;假设开发环境是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;PC 是指运行模拟器的宿主电脑&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;emulator-5554 是模拟器 1，将在 TCP 通信中作为 server 端&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;emulator-5556 是模拟器 2，将在 TCP 通信中作为 client 端&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;配置步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在 emulator-5554 上运行 server，侦听 10.0.2.15:58080&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 PC 上运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;cat ~/.emulator_console_auth_token&lt;/code&gt;，得到一个 token&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 PC 上运行&lt;/p&gt;

    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; telnet localhost 5554
 auth &amp;lt;token&amp;gt;
 redir add tcp:51212:58080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;token&amp;gt;&lt;/code&gt; 是指第 2 步中得到的 token。&lt;/p&gt;

    &lt;p&gt;51212 是 PC 端口，58080 是 5554 模拟器的端口。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 emulator-5556 上运行 client 程序，连接 10.0.2.2:51212&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;至此，两台模拟器之间已经可以通过 TCP 愉快地通信了。&lt;/p&gt;

&lt;p&gt;它们之间的网络连接和通信示意图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/android/emulators-communication.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;以上步骤中用到的端口号都是可以根据你的需求替换的&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Windows 下 telnet 命令默认没有启用，具体启用方法请搜狗一下&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;模拟器的网络限制&quot;&gt;模拟器的网络限制&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;模拟器上运行的 Apps 可以连接到宿主电脑上的网络，但这是通过模拟器间接实现，不是直接连到宿主电脑的网卡。模拟器可以看作是宿主电脑上运行的一个普通程序。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;因为模拟器的特殊网络配置，可能无法支持一些网络协议，比如 ping 命令使用的 ICMP 协议。目前，模拟器不支持 IGMP 和 multicast。&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;试验了一下，模拟器的 shell 里 &lt;code class=&quot;highlighter-rouge&quot;&gt;ping www.sogou.com&lt;/code&gt; 一直卡在那，在手机的 shell 里就可以。&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;额外的发现&quot;&gt;额外的发现&lt;/h2&gt;

&lt;p&gt;在阅读 Android 官方文档里关于模拟器的章节时，意外地发现有一节 &lt;a href=&quot;https://developer.android.com/studio/run/emulator-networking.html#calling&quot;&gt;Sending a voice call or SMS to another emulator instance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;就是说模拟器可以给另外的模拟器打电话和发短信，电话号码就是端口号，比如 emulator-5554 模拟器，电话号码就是 5554，这个号码也可以从模拟器的窗口标题栏上找到，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;Android Emulator - Nexus_5X_API_19:5554&lt;/code&gt;，里面那个 5554 就是。&lt;/p&gt;

&lt;h2 id=&quot;后话&quot;&gt;后话&lt;/h2&gt;

&lt;p&gt;天下博文，大部分都逃不出官方文档与公开源码的范畴（比如本文就是），而且都是选定文档里讲的某一小部分来进行讲解演绎，这在作为扩展视野、快速上手、快速解决问题等用途时还是比较实用的，但如果想系统、全面地学习，官方文档一般是更好的选择。&lt;/p&gt;</content><author><name>王永红</name></author><summary type="html">本文解决的是一个小众场景的问题：</summary></entry></feed>